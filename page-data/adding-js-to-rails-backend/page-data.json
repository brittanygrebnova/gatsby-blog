{"componentChunkName":"component---src-templates-blog-post-js","path":"/adding-js-to-rails-backend","webpackCompilationHash":"f2f3429dbfb4551cf8c6","result":{"data":{"markdownRemark":{"html":"<p>Rails with Javascript Portfolio Project</p>\n<p>I didn’t think it was possible to make my Rails app, DeliverMe, any better than it already was…..</p>\n<p>Just kidding, but I did add some Javascript features to it and it’s really cool. The object of this final project was to hijack a few of the different functionalities in my existing Rails application and use Javascript to render information on the page without a refresh.</p>\n<p>There were a number of road blocks that required a significant amount of focus and research. Here I’ll detail a few of them and also link to my repository.</p>\n<p>First off, where do I even start? This question stalemated the project’s execution until I broke the problem down to a series of small steps. I got a lot of guidance from the walkthrough videos made available from Flatiron alumni. I finally understood that I needed to start by adding an eventListener for one of my existing Rails buttons, and from there, prevent the default action and write a function to display the requested information on the same page. I started with the button that would display all the orders for a single user. I put the listener function inside $(document).ready like so:</p>\n<pre><code>$(document).ready(function() {\n  $(\"button#user-orders\").click(function(e) {\n    e.preventDefault();\n    console.log(\"default prevented!\");\n    getOrders();\n  })\n</code></pre>\n<p>OK. Default (redirecting to the user’s orders index page) prevented, console.logged a message to confirm, and triggered my getOrders function:</p>\n<pre><code>function getOrders() {\n  $.getJSON( 'https://localhost:3000/orders', function(data){\n    console.log(\"the data is: \", data)\n    data[\"orders\"].forEach(function(order) {\n      let userOrder = new Order(order);\n      let userOrderHTML = userOrder.orderHTML();\n      document.getElementById(\"user-orders-list\").innerHTML += userOrderHTML\n    })\n  })\n}\n</code></pre>\n<p>This function sends a getJSON request to the user’s orders index page, retrieves the JSON data and iterates over it. Using a class constructor, I create a new instance of Order and use my prototype method, orderHTML, to format the data and append it to the DOM. Yay!</p>\n<p>The next tricky part was using Javascript to render form data. I ignorantly spent days writing a 20+ line function that would dynamically create a form using pure Javascript, until I met with one of the section leads who clarified that I should instead be hijacking my existing Rails form and using Javascript to display the data instead. Great! After understanding that requirement better, it was a much slimmer amount of code that got the job done. It starts with another eventListener for a click on the button to place a new order:</p>\n<pre><code>$(\"form.new_order\").on(\"submit\", function(e) {\n    e.preventDefault();\n    console.log(\"default prevented!\");\n    const values = $(this).serialize()\n    placeNewOrder(values)\n  })\n</code></pre>\n<p>And then this function is run:</p>\n<pre><code>function placeNewOrder(serializedValues) {\n  $.ajax({\n    url: 'https://localhost:3000/orders',\n    type: 'post',\n    dataType: 'json',\n    data: serializedValues,\n  })\n  .done(function(data) {\n    $('#results').html('')\n    console.log(data)\n    const newOrder = new Order(data[\"order\"])\n    const newOrderHTML = newOrder.orderHTML()\n    $('#results').html(newOrderHTML)\n  })\n}\n</code></pre>\n<p>The order gets submitted and what’s rendered to the DOM is the order’s show page. Beautiful!</p>\n<p>After getting over the idea that this would be the most difficult thing in the world, I had fun adding JS to my Rails application. It was interesting to see how they work together and definitely improved my understanding of both.</p>\n<p>One cool thing to mention is that I was able to help a fellow schoolmate get one of her functions up and running when she ran into a wall. She was using fetch for her JSON requests, which I didn’t use and wasn’t as comfortable building. We worked through the code over a screenshare and by the end got her application to behave as she wanted. A first for me!</p>\n<p>Thanks for reading : )</p>\n<p>My project’s github repository link:\n<a href=\"https://github.com/brittanygrebnova/deliverme\">https://github.com/brittanygrebnova/deliverme</a></p>","frontmatter":{"title":"Adding JavaScript to My Rails Backend"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"pathSlug":"/adding-js-to-rails-backend","prev":{"frontmatter":{"path":"/jquery-tic-tac-toe-with-a-rails-api","title":"jQuery Tic Tac Toe with a Rails API","tags":["ruby","web development","flatiron","getting started"]}},"next":{"frontmatter":{"path":"react-redux-final-project","title":"React/Redux Final Project","tags":["ruby","web development","flatiron","getting started"]}}}}}